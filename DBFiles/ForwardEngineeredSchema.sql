-- MySQL Script generated by MySQL Workbench
-- Thu Jan  5 00:26:22 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema bankingsystem
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bankingsystem
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bankingsystem` DEFAULT CHARACTER SET utf8mb3 ;
USE `bankingsystem` ;

-- -----------------------------------------------------
-- Table `bankingsystem`.`accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`accounts` (
  `accno` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(30) CHARACTER SET 'utf8mb3' NOT NULL,
  `ifsc_code` VARCHAR(30) CHARACTER SET 'utf8mb3' NOT NULL,
  `branch` VARCHAR(30) CHARACTER SET 'utf8mb3' NOT NULL,
  `phone_number` BIGINT NOT NULL,
  `account_type` VARCHAR(30) CHARACTER SET 'utf8mb3' NOT NULL,
  `password` VARCHAR(30) CHARACTER SET 'utf8mb3' NOT NULL,
  PRIMARY KEY (`accno`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `bankingsystem`.`balance_details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`balance_details` (
  `accno` INT NOT NULL,
  `balance` INT NOT NULL,
  `min_balance` INT NOT NULL,
  PRIMARY KEY (`accno`),
  CONSTRAINT `Balance_Accounts`
    FOREIGN KEY (`accno`)
    REFERENCES `bankingsystem`.`accounts` (`accno`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankingsystem`.`investments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`investments` (
  `investment_id` INT NOT NULL AUTO_INCREMENT,
  `accno` INT NOT NULL,
  `amount` INT NOT NULL,
  `interest_rate` FLOAT NULL DEFAULT NULL,
  `investment_date` DATE NOT NULL,
  `maturity_date` DATE NOT NULL,
  `duration` VARCHAR(45) NULL DEFAULT NULL,
  `matured_amount` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`investment_id`),
  INDEX `Deposits_Accounts_idx` (`accno` ASC) VISIBLE,
  CONSTRAINT `Deposits_Accounts`
    FOREIGN KEY (`accno`)
    REFERENCES `bankingsystem`.`accounts` (`accno`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankingsystem`.`loans`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`loans` (
  `loan_id` INT NOT NULL AUTO_INCREMENT,
  `accno` INT NOT NULL,
  `amount` INT NOT NULL,
  `interest_rate` FLOAT NULL DEFAULT NULL,
  `procurement_date` DATE NOT NULL,
  `repayment_deadline` DATE NOT NULL,
  `duration` INT NULL DEFAULT NULL,
  `repayable_amount` INT NULL DEFAULT NULL,
  `status` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`loan_id`),
  INDEX `Loans_Accounts_idx` (`accno` ASC) VISIBLE,
  CONSTRAINT `Loans_Accounts`
    FOREIGN KEY (`accno`)
    REFERENCES `bankingsystem`.`accounts` (`accno`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bankingsystem`.`transactions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankingsystem`.`transactions` (
  `transaction_id` INT NOT NULL AUTO_INCREMENT,
  `sender_accno` INT NOT NULL,
  `recipient_accno` INT NOT NULL,
  `amount` INT NOT NULL,
  `transaction_date` DATE NOT NULL,
  `status` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`transaction_id`),
  INDEX `Transaction_Accounts_idx` (`sender_accno` ASC) VISIBLE,
  INDEX `TTransaction_Accounts_Recipient_idx` (`recipient_accno` ASC) VISIBLE,
  CONSTRAINT `Transaction_Accounts_Sender`
    FOREIGN KEY (`sender_accno`)
    REFERENCES `bankingsystem`.`accounts` (`accno`),
  CONSTRAINT `TTransaction_Accounts_Recipient`
    FOREIGN KEY (`recipient_accno`)
    REFERENCES `bankingsystem`.`accounts` (`accno`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `bankingsystem` ;

-- -----------------------------------------------------
-- function openInvestment
-- -----------------------------------------------------

DELIMITER $$
USE `bankingsystem`$$
CREATE DEFINER=`bankadmin`@`localhost` FUNCTION `openInvestment`(iaccno int, iamount int, mdate date, cdate date) RETURNS int
BEGIN
	declare ibalance int;
    declare iminbalance int;
    
    select balance, min_balance into ibalance, iminbalance from balance_details
    where iaccno = accno;
    
    if ibalance - iamount >= iminbalance then
		update balance_details set balance = ibalance - iamount where accno = iaccno;
		insert into investments values(null,iaccno,iamount,null,cdate,mdate,null,null);
		RETURN 1;
    end if;
RETURN 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function passwordCheck
-- -----------------------------------------------------

DELIMITER $$
USE `bankingsystem`$$
CREATE DEFINER=`bankadmin`@`localhost` FUNCTION `passwordCheck`(iaccno int, ipassword varchar(30)) RETURNS int
BEGIN
	declare validpass varchar(30);
    
    select password into validpass from accounts where accno = iaccno;
    
    if validpass = ipassword then
		return 1;
	else
		return 0;
	end if;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function repayLoan
-- -----------------------------------------------------

DELIMITER $$
USE `bankingsystem`$$
CREATE DEFINER=`bankadmin`@`localhost` FUNCTION `repayLoan`(iaccno int, iloan_id int) RETURNS int
BEGIN
	declare payableamount float;
    declare accbalance float;
    declare minaccbalance float;
    
    select balance into accbalance from balance_details where iaccno = accno;
    select min_balance into minaccbalance from balance_details where iaccno = accno;
    select repayable_amount into payableamount from loans where loan_id = iloan_id;
    
    if accbalance - payableamount > minaccbalance then
		delete from loans where loan_id = iloan_id;
        update balance_details set balance = accbalance - payableamount where accno = iaccno;
		RETURN 1;
    end if;
return 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function sanctionLoan
-- -----------------------------------------------------

DELIMITER $$
USE `bankingsystem`$$
CREATE DEFINER=`bankadmin`@`localhost` FUNCTION `sanctionLoan`(iaccno int, iloan_id int, iamount int) RETURNS int
BEGIN
	update loans set status = 'Sanctioned' where loan_id = iloan_id;
    update balance_details set balance = balance + iamount where accno = iaccno;
RETURN 1;
END$$

DELIMITER ;
USE `bankingsystem`;

DELIMITER $$
USE `bankingsystem`$$
CREATE
DEFINER=`bankadmin`@`localhost`
TRIGGER `bankingsystem`.`accounts_AFTER_INSERT`
AFTER INSERT ON `bankingsystem`.`accounts`
FOR EACH ROW
BEGIN
	if new.account_type = 'SB' then
		insert into balance_details values(new.accno, 3000, 3000);
	elseif new.account_type = 'NRI' then
		insert into balance_details values(new.accno, 10000,10000);
	else 
		insert into balance_details values(new.accno, 5000, 5000);
	end if;
END$$

USE `bankingsystem`$$
CREATE
DEFINER=`bankadmin`@`localhost`
TRIGGER `bankingsystem`.`accounts_AFTER_UPDATE`
AFTER UPDATE ON `bankingsystem`.`accounts`
FOR EACH ROW
BEGIN
	
	if new.account_type = 'SB' then
		update balance_details set min_balance = 3000 where accno = old.accno;
	elseif new.account_type = 'NRI' then
		update balance_details set min_balance = 10000 where accno = old.accno;
	else 
		update balance_details set min_balance = 5000 where accno = old.accno;
	end if;
END$$

USE `bankingsystem`$$
CREATE
DEFINER=`bankadmin`@`localhost`
TRIGGER `bankingsystem`.`investments_AFTER_DELETE`
AFTER DELETE ON `bankingsystem`.`investments`
FOR EACH ROW
BEGIN
	declare today date;
    set today = curdate();
    
    if today < old.maturity_date then
		update balance_details set balance = balance + old.amount where
        accno = old.accno;
	else
		update balance_details set balance = balance + old.matured_amount where
        accno = old.accno;
	end if;
END$$

USE `bankingsystem`$$
CREATE
DEFINER=`bankadmin`@`localhost`
TRIGGER `bankingsystem`.`investments_BEFORE_INSERT`
BEFORE INSERT ON `bankingsystem`.`investments`
FOR EACH ROW
BEGIN
	declare period int;
    declare pyears float;
    declare interesttemp float;
    
    set new.duration = datediff(new.maturity_date, new.investment_date);
	set period = new.duration / 30;
    set pyears = new.duration / 365;
    
    set interesttemp = 0;
    while period > 0 do
		set period = period - 1;
        set interesttemp = interesttemp + 0.1;
	end while;
    
    if interesttemp > 7 then
		set interesttemp = 7;
	end if;
    
    set new.interest_rate = interesttemp;
	set new.matured_amount = ((interesttemp * new.amount * pyears) / 100) + new.amount;
	
END$$

USE `bankingsystem`$$
CREATE
DEFINER=`bankadmin`@`localhost`
TRIGGER `bankingsystem`.`loans_BEFORE_INSERT`
BEFORE INSERT ON `bankingsystem`.`loans`
FOR EACH ROW
BEGIN
	declare period int;
    declare pyears float;
    declare interesttemp float;
    
    set new.duration = datediff(new.repayment_deadline, new.procurement_date);
	set period = new.duration / 30;
    set pyears = new.duration / 365;
    
    set interesttemp = 5;
    while period > 0 do
		set period = period - 1;
        set interesttemp = interesttemp + 0.15;
	end while;
    
    if interesttemp > 25 then
		set interesttemp = 25;
	end if;
    
    set new.interest_rate = interesttemp;
	set new.repayable_amount = ((interesttemp * new.amount * pyears) / 100) + new.amount;
    set new.status = 'Pending Sanction';
END$$

USE `bankingsystem`$$
CREATE
DEFINER=`bankadmin`@`localhost`
TRIGGER `bankingsystem`.`transactions_BEFORE_INSERT`
BEFORE INSERT ON `bankingsystem`.`transactions`
FOR EACH ROW
BEGIN
	declare senderbal float;
    declare senderminbal float;
    
    select balance,min_balance into senderbal,senderminbal from balance_details where 
    accno = new.sender_accno;
    
    if senderbal - new.amount < senderminbal then
		set new.status = 'FAILED';
	else 
		set new.status = 'SUCCESS';
        update balance_details set balance = balance - new.amount where
        accno = new.sender_accno;
        update balance_details set balance = balance + new.amount where
        accno = new.recipient_accno;
	end if;
        
    
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
